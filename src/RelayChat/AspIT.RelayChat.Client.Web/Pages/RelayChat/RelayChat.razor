@page "/relaychat"

@using AspIT.RelayChat.Entities
@using AspIT.RelayChat.Client.Web.Pages.ChatComponents
@using AspIT.RelayChat.SignalRLibrary
@using Microsoft.AspNetCore.SignalR.Client
@inject Chat chat;

@implements IDisposable
@inject UsernameState usernameState
@inject NavigationManager navigationManager

<PageTitle>RelayChat</PageTitle>
<head>
    <link href="~/css/RelayChat.css" rel="stylesheet" />
</head>

<!--<button @onclick="TestStateChanged">Test StateHasChanged</button>-->
<!-- I could probably use this on different sites, so the data, layout etc. is the same, but the chatID is different -->
<h3>RelayChat</h3>

<div class="connection-container">
    @if (chat.hubConnection?.State != HubConnectionState.Connected){
        <span>Connecting <p>❌</p></span>
    }
    else
    {
        <span>Connected <p>✔</p></span>
    }
</div>

<span></span>
<p>Username Container: <b>@usernameState.user.Username</b></p>
<p>Username chat: <b>@chat.usernameState.user.Username</b></p>

<UsernameInput OnSubmittedUsername="() => RunStateChanged()"></UsernameInput>

@if (chat.hubConnection?.State == HubConnectionState.Connected)
{
    <h1>Chat is connected</h1>
    <!-- <input type="text" @bind="userInput" placeholder="displayname" /> -->
    <input type="text" @bind="messageInput" placeholder="Your message..." />
    <button @onclick="SendMsg">Send</button>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
    <span>Connecting <Spinner Color="SpinnerColor.Primary"/></span>
}

<hr>

<input type="text" class="form-control" placeholder="Type a message..." />

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<!-- Container for chat window -->
<div class="container">
    <div class="row">
        <h2>Chat</h2>
        
        <!-- Container for chat input -->
        <form action="/" method="get">
            <!-- Action where data is sent upon submission; method defines how the data is sent -->
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="Your Display name" />
                <input type="text" class="form-control" placeholder="Type a message..." />
                <button class="btn btn-primary" type="button" onclick="sendMsg">Send</button>
            </div>
        </form>
        <div>
            <div class="chat-window">
                <div class="chat-messages">
                    <div class="chat-message">
                        <div class="chat-message-header">
                            <span class="chat-message-author">Author</span>
                            <span class="chat-message-timestamp">Timestamp</span>
                        </div>
                        <div class="chat-message-body">
                            <p>Message</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private HubConnection hubConnection;
    private List<string> messages = new();
    private string messageInput;
    // public bool IsConnected = false; Change it later
    public bool IsConnected => chat.hubConnection?.State == HubConnectionState.Connected;

    protected override void OnInitialized()
    {
        if (usernameState.user == null)
        {
            // Set a default user or handle the null scenario
            // usernameState.user = new User("default user");
            Console.WriteLine("usernameState.User is null");
        }
        chat.usernameState = this.usernameState;
        chat.usernameState.UserChanged += StateHasChanged;
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     while (usernameState.user == null)
    //     {
    //         await Task.Delay(100); 
    //     }
    //     chat.usernameState = this.usernameState;
    //     chat.usernameState.UserChanged += StateHasChanged;
    // }

    private void ChangePropertyValue()
    {
        chat.usernameState.SetUsername("New value set in the State " +
            $"Container Example component: {DateTime.Now}");
    }

    public void Dispose()
    {
        chat.usernameState.UserChanged -= StateHasChanged;
    }

    private async Task SendMsg()
    {
        chat.SendMessage(messageInput); // It just closes the connection? Why is the hubConnection null?
    }

    public void test()
    {
        Console.WriteLine("TEST!@");
    }

    private void RunStateChanged()
    {
        StateHasChanged();
        Console.WriteLine("State has changed");
    }
}
