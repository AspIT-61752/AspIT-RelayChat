@using AspIT.RelayChat.Entities
@using AspIT.RelayChat.SignalRLibrary
@using System.Diagnostics
@using Microsoft.Extensions.Logging

@inject NavigationManager NavigationManager
@inject Chat chat

@implements IDisposable
@inject UsernameState usernameState

<div>
    @if (!isUsernameSet)
    {
        <div class="chat-container">
            <div class="input-container">
                <label for="username">Username:</label>
                <InputText id="username" @bind-Value="UserInputName" disabled="@isUsernameSet" />
                <button class="btn btn-primary" @onclick="HandleSubmit">Submit</button>
            </div>
        </div>
    }
    else
    {
        <p>Welcome, <b>@usernameState.user.Username</b>!</p>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnSubmittedUsername { get; set; }

    private User userModel = new();
    private bool isUsernameSet = false;
    Logger<UsernameInput> log;
    public string TestText { get; set; } = "Test";
    public string UserInputName { get; set; } = "test username";

    protected override async void OnInitialized()
    {
        Console.WriteLine("Component Initialized");
        Console.WriteLine(isUsernameSet);
        usernameState.UserChanged += StateHasChanged;
        await OnSubmittedUsername.InvokeAsync();
        // await InvokeAsync(StateHasChanged);
    }

    private void test()
    {
        Console.WriteLine("TEST!@");
        TestText = "FROM TEST()";
        usernameState.SetUsername("testUsername");
    }

    public async Task HandleSubmit()
    {
        usernameState.SetUsername(UserInputName);
        isUsernameSet = true;

        // Starts the chat
        await chat.Start();
        await OnSubmittedUsername.InvokeAsync();

    }

    public void Dispose()
    {
        usernameState.UserChanged -= StateHasChanged;
    }
}
