@page "/test"

@using AspIT.RelayChat.Entities
@using AspIT.RelayChat.Web.Client.Pages.ChatComponents
@using AspIT.RelayChat.SignalRLibrary
@using Microsoft.AspNetCore.SignalR.Client
@inject Chat chat;

@implements IDisposable
@inject UsernameState usernameState
@inject NavigationManager navigationManager
@rendermode InteractiveWebAssembly

<PageTitle>Weather</PageTitle>

<!-- I could probably use this on different sites, so the data, layout etc. is the same, but the chatID is different -->
<h3>RelayChat</h3>
<button @onclick="test">Test3</button>
<p>Username Container: <b>@usernameState.user.Username</b></p>
<UsernameInput></UsernameInput>

@if (chat.hubConnection?.State != HubConnectionState.Connected)
{
    <!-- <input type="text" @bind="userInput" placeholder="displayname" /> -->
    <input type="text" @bind="messageInput" placeholder="message" />
    <button @onclick="SendMsg">Send</button>

    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}
else
{
    <span>Connecting <Spinner Color="SpinnerColor.Primary"/></span>
    <Spinner Type="SpinnerType.Dots" Class="me-3" Color="SpinnerColor.Primary" />
}
<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message: <input @bind="messageInput" size="50" />
    </label>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

<!-- Container for chat window -->
<div class="container">
    <div class="row">
        <h2>Chat</h2>
        
        <!-- Container for chat input -->
        <form action="/" method="get">
            <!-- Action where data is sent upon submission; method defines how the data is sent -->
            <div class="mb-3">
                <input type="text" class="form-control" placeholder="Your Display name" />
                <input type="text" class="form-control" placeholder="Type a message..." />
                <button class="btn btn-primary" type="button" onclick="sendMsg">Send</button>
            </div>
        </form>
        <div>
            <div class="chat-window">
                <div class="chat-messages">
                    <div class="chat-message">
                        <div class="chat-message-header">
                            <span class="chat-message-author">Author</span>
                            <span class="chat-message-timestamp">Timestamp</span>
                        </div>
                        <div class="chat-message-body">
                            <p>Message</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private HubConnection hubConnection;
    private List<string> messages = new();
    private string userInput;
    private string messageInput;
    // public bool IsConnected = false; Change it later
    public bool IsConnected => chat.hubConnection?.State == HubConnectionState.Connected;

    protected override void OnInitialized()
    {
        if (usernameState.user == null)
        {
            // Set a default user or handle the null scenario
            // usernameState.user = new User("default user");
            Console.WriteLine("usernameState.User is null");
        }
        chat.usernameState = this.usernameState;
        chat.usernameState.UserChanged += StateHasChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        while (usernameState.user == null)
        {
            await Task.Delay(100); // Wait until usernameState.user is initialized
        }
        chat.usernameState = this.usernameState;
        chat.usernameState.UserChanged += StateHasChanged;
    }

    private void ChangePropertyValue()
    {
        chat.usernameState.SetUsername("New value set in the State " +
            $"Container Example component: {DateTime.Now}");
    }

    public void Dispose()
    {
        chat.usernameState.UserChanged -= StateHasChanged;
    }


    private void HandleButtonClick()
    {
        Console.WriteLine("Button clicked!");
        // Use the usernameState service
        // if (usernameState.user.Username != "username")
        // {
        //     var username = usernameState.user.Username;
        //     Console.WriteLine($"Username: {username}");
        // }
    }

    protected async Task SetUsername()
    {
        
        // chat.Start();
        // private bool connected;
        // IsConnected = connected;
    }

    private async Task SendMsg()
    {
        
    }

    public void test()
    {
        Console.WriteLine("TEST!@");
    }
}
